//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment5.WeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getLatAndLong", ReplyAction="http://tempuri.org/IWeatherService/getLatAndLongResponse")]
        System.Tuple<double, double> getLatAndLong(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getLatAndLong", ReplyAction="http://tempuri.org/IWeatherService/getLatAndLongResponse")]
        System.Threading.Tasks.Task<System.Tuple<double, double>> getLatAndLongAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getForcast", ReplyAction="http://tempuri.org/IWeatherService/getForcastResponse")]
        string[] getForcast(string zipcode, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getForcast", ReplyAction="http://tempuri.org/IWeatherService/getForcastResponse")]
        System.Threading.Tasks.Task<string[]> getForcastAsync(string zipcode, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getLocation", ReplyAction="http://tempuri.org/IWeatherService/getLocationResponse")]
        string getLocation(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/getLocation", ReplyAction="http://tempuri.org/IWeatherService/getLocationResponse")]
        System.Threading.Tasks.Task<string> getLocationAsync(string zipcode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : Assignment5.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<Assignment5.WeatherService.IWeatherService>, Assignment5.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<double, double> getLatAndLong(string zipcode) {
            return base.Channel.getLatAndLong(zipcode);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<double, double>> getLatAndLongAsync(string zipcode) {
            return base.Channel.getLatAndLongAsync(zipcode);
        }
        
        public string[] getForcast(string zipcode, string units) {
            return base.Channel.getForcast(zipcode, units);
        }
        
        public System.Threading.Tasks.Task<string[]> getForcastAsync(string zipcode, string units) {
            return base.Channel.getForcastAsync(zipcode, units);
        }
        
        public string getLocation(string zipcode) {
            return base.Channel.getLocation(zipcode);
        }
        
        public System.Threading.Tasks.Task<string> getLocationAsync(string zipcode) {
            return base.Channel.getLocationAsync(zipcode);
        }
    }
}
